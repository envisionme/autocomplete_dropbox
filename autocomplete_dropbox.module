<?php

/**
 * @file
 * This module defines a new cck field and widget that provides an autocomplete field with a dropbox for storing multiple values.
 */


//=======================================//
// SOME MENU ITEMS                       //
//=======================================//

/**
 * Implementation of hook_menu
 * This module uses a custom autocomplete path because we need the term id in addition to the term name
 */
function autocomplete_dropbox_menu() {
  $items = array();
  $items['autocomplete_dropbox.json'] = array(
    'title' => 'Dropbox Autocomplete Widget',
    'page callback' => 'autocomplete_dropbox_autosuggest',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

function autocomplete_dropbox_autosuggest() {
  $prefetch = TRUE;
  $data = array();
  drupal_set_header('Content-type: text/plain; charset: utf-8');
  if (!$prefetch) {
    global $_autocomplete_dropbox_data;
    echo json_encode($_autocomplete_dropbox_data);
    exit();
  }
  //Pre fetch data from db
  $result = db_query("SELECT tid, name FROM {term_data} WHERE LOWER(name) LIKE '%%%s%' AND vid = %d", strtolower($_GET['term']), (int)$_GET['vid']);
  while ($obj = db_fetch_object($result)) {
    $json = array();
    $json['value'] = $obj->name;
    $json['name'] = $obj->name;
    $json['tid'] = $obj->tid;
    $data[] = $json;
  }
  echo json_encode($data);
}



// A simple test hook we'll use later

// Example variable $layouts
$strings = array();

// The hook will hook other modules on our function
$strings = module_invoke_all('autocomplete_dropbox_theme_dropdown_item');

//print_r($strings);

// The returned value is an array of return values of the hook implementations
foreach($strings as $next_string){
  // Do stuff with the returned variables
  print $next_string;
}

//print_r(module_implements('autocomplete_dropbox_theme_dropdown_item'));
//print_r($strings);

//Add the styling needed
drupal_add_css(drupal_get_path('module', 'autocomplete_dropbox') . '/autocomplete_dropbox.css');

//==========================================//
// DEFINE THE FIELD
//==========================================//

/**
* Implementation of hook_help().
*/
function autocomplete_dropbox_help($path, $arg) {
  if ($path == 'admin/help#autocomplete_dropbox') {
    return 'A module to aid the process of selecting entities such as usernames and taxonomy terms by means of a dropdown box.';
  }
}

/**
* Implementation of hook_field_info().
*/
function autocomplete_dropbox_field_info() {
  return array(
    'autocomplete_dropbox' => array(
      'label' => t('Auto Complete Dropbox'),
      'description' => t('Store multiple items in one field.'),
    ),
  );
}

/**
* Implementation of hook_field_settings().
*/
function autocomplete_dropbox_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      // Create the settings form for selecting which vocabulary to use for autocompletion
      $vocabularies = array();
      foreach (taxonomy_get_vocabularies() as $vocabulary) {
        $vocabularies[$vocabulary->vid] = $vocabulary->name;
      }
      $form = array();
      $form['context'] = array(
        '#type'           => 'select',
        '#title'          => t('Context'),
        '#default_value'  => $field['context'] ? $field['context'] : '',
        '#required'       => TRUE,
        '#options'        => array('User', 'Taxonomy'),
        '#description'    => 'The environment this field will be used in.', 
      );
      $form['vocabulary_id'] = array(
        '#type'   => 'select',
        '#title'  => t('Auto Complete Vocabulary'), 
        '#default_value' => $field['vocabulary_id'] ? $field['vocabulary_id'] : '',
        '#required' => TRUE,
        '#options' => $vocabularies,
        '#description' => t('The id of the vocabulary to be used to populate the autocomplete dropbox suggestions.'),
      );
      $form['term_limit'] = array(
        '#type'   => 'textfield',
        '#title'  => t('Amount of terms allowed'), 
        '#default_value' => $field['term_limit'] ? $field['term_limit'] : '',
        '#required' => TRUE,
        '#description' => t('The maximum amount of terms allowed to be selected for this field.'),
      );
      return $form;
      case 'database columns': // DB columns needed for storing field
        $columns['term_ids'] = array(
          'type' => 'varchar',
          'length' => 40,
          'not null' => FALSE,
          'sortable' => TRUE,
          'views' => TRUE,
        );
        return $columns;
      case 'save':
        return array('vocabulary_id', 'term_limit');
    
  }
}

/**
* Implementation of hook_field().
*/
function autocomplete_dropbox_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {      
    case 'presave':
      foreach ($items as $delta => $value) {
        _autocomplete_dropbox_process($items[$delta], $delta, $field, $node);
      }
    break;
  }
}

/**
* Implementation of hook_process().
*/

function _autocomplete_dropbox_process(&$item, $delta = 0, $field, $node) {
  $term_ids = explode(',', $item['term_ids']);
  $array_to_save = array(); 
  //print_r($node->taxonomy);
  //break;
  $node->taxonomy['tags'][$field['vocabulary_id']] = '';
  foreach($term_ids as $term_id) {
    if(is_numeric($term_id)) {
      $array_to_save[] = $term_id;
      $taxonomy_term = taxonomy_get_term($term_id);
      $node->taxonomy[] = $taxonomy_term;
    }
    else {
      if(strlen($term_id) > 3) {
        $newterm = array('vid' => $field['vocabulary_id'], 'name' => substr($term_id, 3));
        taxonomy_save_term($newterm);
        $terms = taxonomy_get_term_by_name(substr($term_id, 3));
        $term = array_shift($terms);
        $node->taxonomy[] = $term;
        $array_to_save[] = $term->tid;
      }
    }
  }
  $item['term_ids'] = implode(',', $array_to_save);
}
/**
* Implementation of hook_content_is_empty().
*/
function autocomplete_dropbox_content_is_empty($item, $field) {
  if (empty($item['term_ids'])) {
    return TRUE;
  }
  return FALSE;
}

//==========================================//
// DEFINING A WIDGET
//==========================================//

/**
* Implementation of hook_widget_info().
*/
function autocomplete_dropbox_widget_info() {
  return array(
    'autocomplete_dropbox_widget' => array(
      'label' => t('Auto Complete Dropbox'),
      'field types' => array('autocomplete_dropbox'), // Field types this widget can be used with.
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array('default value' => CONTENT_CALLBACK_DEFAULT,),
    ),
  );
}

/**
* Implementation of hook_widget().
*/
function autocomplete_dropbox_widget(&$form, &$form_state, $field, $items, $delta = 0) {

  //Get the current users contacts to use for the autocomplete
  $result = db_query('SELECT name, tid FROM {term_data} WHERE vid="%s"', $field['vocabulary_id']);
  $term_names = array();
  $term_ids   = array();
  $terms_array = array();
  while ($next_term = db_fetch_object($result)) {
    $term_names[] = $next_term->name;
    $term_ids[]   = $next_term->tid;
    $terms_array[]  = array('id' => $next_term->tid, 'value' => $next_term->name);
  }
 
  //Add the javascript needed
  drupal_add_js(drupal_get_path('module', 'autocomplete_dropbox') . '/autocomplete_dropbox.js');
  //Send all the variables needed through to our javascript
  drupal_add_js(array('autocomplete_dropbox' => array('a'.$field['vocabulary_id'] => $terms_array), 'module_path' => base_path().drupal_get_path('module', 'autocomplete_dropbox')), 'setting');

  $default_ids = explode(',', $items[$delta]['term_ids']);
  $default_ids = array_filter($default_ids, 'strlen');

  $nice_default_values = '';

  foreach($default_ids as $term_id) {
    if ($term = taxonomy_get_term($term_id))
      $nice_default_values .= '<div class="entered-term-name"><div class="term-id">'. $term_id .'</div>' .$term->name. '<a class="close-entered-name">Ã—</a></div>';
  }

  $nice_field_prefix = '<div class="autocomplete-dropbox-field-wrapper"><div class="autocomplete-dropbox-label">'. $field['widget']['label']. '<div class="terms-count"><span class="entered">0</span>/'. $field['term_limit'] .'</div></div><div class="vocab-id">'. $field['vocabulary_id'] .'</div><div 
class="term-names-wrapper" id="term-names-wrapper-0" style="background-image: url('. base_path().drupal_get_path('module', 'autocomplete_dropbox') .'/images/throbber.gif); background-repeat: no-repeat; 
background-position: 
bottom right;"><div class="description"></div><div id="entered-term-names-wrapper">'. $nice_default_values .'</div><input class="term-names-input" id="term-names-input-0" type="text" autocomplete="off"/></div><div 
style="clear: 
both"></div><div 
class="dropdown-term-names" style="display: none;"></div><div style="clear: both"></div>'; 

  $element['term_ids'] = array(
    '#type' => 'textfield', 
    '#maxlength' => 200, 
    '#weight' => 0,
    '#description' => $field['widget']['description'],
    '#prefix' => $nice_field_prefix,
    '#default_value' => implode(',', $default_ids),
    '#suffix' => '</div>',
  );
       
  return $element;
}

//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
* Implementation of hook_theme().
*/
function autocomplete_dropbox_theme() {
  return array(
    // Themes for the formatters.
    'autocomplete_dropbox_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
* Implementation of hook_field_formatter_info().
*/
function autocomplete_dropbox_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('autocomplete_dropbox'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
* Theme function for 'default' companyfield formatter.
*/
function theme_autocomplete_dropbox_formatter_default($element) {
  $term_id_array = explode(',', $element['#item']['term_ids']);
  $term_names_array = array();
  $output = '';
  foreach($term_id_array as $term_id) {
    $next_term = taxonomy_get_term($term_id);
    $term_names_array[] = $next_term->name;
  } 
  return implode(', ', $term_names_array);
}

